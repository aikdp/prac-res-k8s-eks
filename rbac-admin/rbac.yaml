#create role to access our esxpense cluster for new user:
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: expense
  name: rl-pod
rules:
- apiGroups: [""] # "" indicates the core API group, contains pods, services, namespaces, for accessing kubernets API.
  resources: ["*"]   #only pods
  verbs: ["get", "watch", "list"]
---
#create RoleBinding 
apiVersion: rbac.authorization.k8s.io/v1
# This role binding allows "jane" to read pods in the "default" namespace.
# You need to already have a Role named "pod-reader" in that namespace.
kind: RoleBinding
metadata:
  name: rb-pod
  namespace: expense
roleRef:
  # "roleRef" specifies the binding to a Role / ClusterRole
  kind: Role #this must be Role or ClusterRole
  name: rl-pod # this must match the name of the Role or ClusterRole you wish to bind to
  apiGroup: rbac.authorization.k8s.io
subjects:
# You can specify more than one "subject"
- kind: User
  name: suresh # "name" is case sensitive
  apiGroup: rbac.authorization.k8s.io
- kind: User
  name: ramesh # "name" is case sensitive
  apiGroup: rbac.authorization.k8s.io
---
#ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  # "namespace" omitted since ClusterRoles are not namespaced
  name: clstr-reader
  namespace: expense
rules:
- apiGroups: [""]
  #
  # at the HTTP level, the name of the resource for accessing Secret
  # objects is "secrets"
  resources: ["*"] 
  verbs: ["get", "watch", "list", "create", "patch", "update"]
---
#create Cluster RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: role-grantor-binding
  namespace: expense
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: clstr-reader
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: User
  name: suresh
- apiGroup: rbac.authorization.k8s.io
  kind: User
  name: ramesh  