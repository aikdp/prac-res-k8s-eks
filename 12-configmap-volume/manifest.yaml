#Create ConfigMap for nginx.conf: if changes needed, we can not go and change in the dockeerfile. it is not a good practice.
#So u can use that nginx.conf configuration in ConfigMap, then we can chnage anytime, and do delete pod and apply. It will update.
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-config
data:
  nginx.conf: |   
    # For more information on configuration, see:
    #   * Official English Documentation: http://nginx.org/en/docs/
    #   * Official Russian Documentation: http://nginx.org/ru/docs/

    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log;
    pid /run/nginx.pid;

    # Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.
    include /usr/share/nginx/modules/*.conf;

    events {
        worker_connections 1024;
    }

    http {
        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';

        access_log  /var/log/nginx/access.log  main;

        sendfile            on;
        tcp_nopush          on;
        tcp_nodelay         on;
        keepalive_timeout   65;
        types_hash_max_size 4096;

        include             /etc/nginx/mime.types;
        default_type        application/octet-stream;

        # Load modular configuration files from the /etc/nginx/conf.d directory.
        # See http://nginx.org/en/docs/ngx_core_module.html#include
        # for more information.
        include /etc/nginx/conf.d/*.conf;

        server {
            listen       8080;
            listen       [::]:8080;
            server_name  _;
            root         /usr/share/nginx/html;

            # Load configuration files for the default server block.
            include /etc/nginx/default.d/*.conf;

            error_page 404 /404.html;
            location = /404.html {
            }

            error_page 500 502 503 504 /50x.html;
            location = /50x.html {
            }
        }

      # Settings for a TLS enabled server.
      #
      #    server {
      #        listen       443 ssl http2;
      #        listen       [::]:443 ssl http2;
      #        server_name  _;
      #        root         /usr/share/nginx/html;
      #
      #        ssl_certificate "/etc/pki/nginx/server.crt";
      #        ssl_certificate_key "/etc/pki/nginx/private/server.key";
      #        ssl_session_cache shared:SSL:1m;
      #        ssl_session_timeout  10m;
      #        ssl_ciphers PROFILE=SYSTEM;
      #        ssl_prefer_server_ciphers on;
      #
      #        # Load configuration files for the default server block.
      #        include /etc/nginx/default.d/*.conf;
      #
      #        error_page 404 /404.html;
      #            location = /40x.html {
      #        }
      #
      #        error_page 500 502 503 504 /50x.html;
      #            location = /50x.html {
      #        }
      #    }
    }
---
#create frontend YamlFile
apiVersion: apps/v1
kind: Deployment
metadata: 
  name: frontend
  namespace: expense
  labels:
    project: robo
    state: qa
    tier: frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      project: robo
      state: qa
      tier: frontend
  template:
    metadata:
      labels:
        project: robo
        state: qa
        tier: frontend
    spec:
      containers:
        - name: frontend
          image: kdprasad028/pcfrontend:v1  
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:            #limits should be greater than or equal to requests
              cpu: 100m
              memory: 128Mi
          readinessProbe:
            tcpSocket:
              port: 8080
            initialDelaySeconds: 15
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 15
            periodSeconds: 10
          volumeMounts:   #this for configmap mount
            - name: config-volume
              mountPath: /etc/nginx/nginx.conf
      volumes:
        - name: config-volume
          configMap:
            name: frontend-config
---
#create Service to commu frontend Pods
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: expense
spec:
  selector:
    project: robo
    state: qa
    tier: frontend
  ports:
  - name: frontend-port
    protocol: TCP
    port: 8080  #here service
    targetPort: 8080  #container port, nginx port I chnaged to 8080, as we are using baremin OS, not opens 80
  type: LoadBalancer
---
#create HPA
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: frontend-hpa
  namespace: expense
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: frontend
  minReplicas: 1
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 15
